function neural_baseline = get_neural_baseline_table(d,lo)

%% Get baseline-only table (S1, all groups including HC)

% Define column headers
headers = {'ID', 'Time', 'Group', 'A1', 'm_ventral_insula', 'm_dorsal_insula', ...
           'm_posterior_insula', 'mPFC', 'precuneus', 'FM_PAIN', 'FM_MSS', ...
           'general', 'sound'};

% -------------------------------
% SOUND LOW
% -------------------------------
con_table = [];

% Group 1, S1
g1s1 = [d.G1.S1.id, d.G1.S1.time, ones(length(d.G1.S1.id), 1), ...
       lo.roi.G1.S1.A1.all_s_l, lo.roi.G1.S1.m_ventral_insula.all_s_l, ...
       lo.roi.G1.S1.m_dorsal_insula.all_s_l, lo.roi.G1.S1.m_posterior_insula.all_s_l, ...
       lo.roi.G1.S1.mPFC.all_s_l, lo.roi.G1.S1.precuneus.all_s_l, ...
       lo.fm_mvpa.G1.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G1.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G1.S1.all_s_l.general, lo.na_mvpa.G1.S1.all_s_l.sound];
con_table = [con_table; g1s1];

% Group 2, S1
g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id), 1), ...
       lo.roi.G2.S1.A1.all_s_l, lo.roi.G2.S1.m_ventral_insula.all_s_l, ...
       lo.roi.G2.S1.m_dorsal_insula.all_s_l, lo.roi.G2.S1.m_posterior_insula.all_s_l, ...
       lo.roi.G2.S1.mPFC.all_s_l, lo.roi.G2.S1.precuneus.all_s_l, ...
       lo.fm_mvpa.G2.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G2.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G2.S1.all_s_l.general, lo.na_mvpa.G2.S1.all_s_l.sound];
con_table = [con_table; g2s1];

% Group 3, S1
g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id), 1), ...
       lo.roi.G3.S1.A1.all_s_l, lo.roi.G3.S1.m_ventral_insula.all_s_l, ...
       lo.roi.G3.S1.m_dorsal_insula.all_s_l, lo.roi.G3.S1.m_posterior_insula.all_s_l, ...
       lo.roi.G3.S1.mPFC.all_s_l, lo.roi.G3.S1.precuneus.all_s_l, ...
       lo.fm_mvpa.G3.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G3.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G3.S1.all_s_l.general, lo.na_mvpa.G3.S1.all_s_l.sound];
con_table = [con_table; g3s1];

% HC, S1
hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id), 1), ...
       lo.roi.HC.S1.A1.all_s_l, lo.roi.HC.S1.m_ventral_insula.all_s_l, ...
       lo.roi.HC.S1.m_dorsal_insula.all_s_l, lo.roi.HC.S1.m_posterior_insula.all_s_l, ...
       lo.roi.HC.S1.mPFC.all_s_l, lo.roi.HC.S1.precuneus.all_s_l, ...
       lo.fm_mvpa.HC.S1.all_s_l.FM_PAIN, lo.fm_mvpa.HC.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.HC.S1.all_s_l.general, lo.na_mvpa.HC.S1.all_s_l.sound];
con_table = [con_table; hcs1];

% Table
con_table_all_s_l = array2table(con_table, 'VariableNames', headers);
con_table_all_s_l = sortrows(con_table_all_s_l, 'ID');

% -------------------------------
% SOUND HIGH
% -------------------------------
con_table_h = [];

% Group 1, S1
g1s1 = [d.G1.S1.id, d.G1.S1.time, ones(length(d.G1.S1.id), 1), ...
       lo.roi.G1.S1.A1.all_s_h, lo.roi.G1.S1.m_ventral_insula.all_s_h, ...
       lo.roi.G1.S1.m_dorsal_insula.all_s_h, lo.roi.G1.S1.m_posterior_insula.all_s_h, ...
       lo.roi.G1.S1.mPFC.all_s_h, lo.roi.G1.S1.precuneus.all_s_h, ...
       lo.fm_mvpa.G1.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G1.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G1.S1.all_s_h.general, lo.na_mvpa.G1.S1.all_s_h.sound];
con_table_h = [con_table_h; g1s1];

% Group 2, S1
g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id), 1), ...
       lo.roi.G2.S1.A1.all_s_h, lo.roi.G2.S1.m_ventral_insula.all_s_h, ...
       lo.roi.G2.S1.m_dorsal_insula.all_s_h, lo.roi.G2.S1.m_posterior_insula.all_s_h, ...
       lo.roi.G2.S1.mPFC.all_s_h, lo.roi.G2.S1.precuneus.all_s_h, ...
       lo.fm_mvpa.G2.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G2.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G2.S1.all_s_h.general, lo.na_mvpa.G2.S1.all_s_h.sound];
con_table_h = [con_table_h; g2s1];

% Group 3, S1
g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id), 1), ...
       lo.roi.G3.S1.A1.all_s_h, lo.roi.G3.S1.m_ventral_insula.all_s_h, ...
       lo.roi.G3.S1.m_dorsal_insula.all_s_h, lo.roi.G3.S1.m_posterior_insula.all_s_h, ...
       lo.roi.G3.S1.mPFC.all_s_h, lo.roi.G3.S1.precuneus.all_s_h, ...
       lo.fm_mvpa.G3.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G3.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G3.S1.all_s_h.general, lo.na_mvpa.G3.S1.all_s_h.sound];
con_table_h = [con_table_h; g3s1];

% HC, S1
hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id), 1), ...
       lo.roi.HC.S1.A1.all_s_h, lo.roi.HC.S1.m_ventral_insula.all_s_h, ...
       lo.roi.HC.S1.m_dorsal_insula.all_s_h, lo.roi.HC.S1.m_posterior_insula.all_s_h, ...
       lo.roi.HC.S1.mPFC.all_s_h, lo.roi.HC.S1.precuneus.all_s_h, ...
       lo.fm_mvpa.HC.S1.all_s_h.FM_PAIN, lo.fm_mvpa.HC.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.HC.S1.all_s_h.general, lo.na_mvpa.HC.S1.all_s_h.sound];
con_table_h = [con_table_h; hcs1];

con_table_all_s_h = array2table(con_table_h, 'VariableNames', headers);
con_table_all_s_h = sortrows(con_table_all_s_h, 'ID');

% -------------------------------
% Merge + reshape
% -------------------------------
% Add intensity
con_table_all_s_l.Intensity = ones(height(con_table_all_s_l),1);
con_table_all_s_h.Intensity = 2*ones(height(con_table_all_s_h),1);

con_table_all_s_l = movevars(con_table_all_s_l,'Intensity','After','Group');
con_table_all_s_h = movevars(con_table_all_s_h,'Intensity','After','Group');

% Align
con_table_all_s_h = con_table_all_s_h(:, con_table_all_s_l.Properties.VariableNames);

% Concatenate
con_table_wide = [con_table_all_s_l; con_table_all_s_h];
con_table_wide = sortrows(con_table_wide, {'ID','Time'});

% Reshape to long
keyVars   = {'ID','Time','Group','Intensity'};
dataVars  = setdiff(con_table_wide.Properties.VariableNames, keyVars, 'stable');

neural_baseline = stack(con_table_wide, dataVars, ...
                      'NewDataVariableName','value', ...
                      'IndexVariableName','measure');

% Rename
neural_baseline.Properties.VariableNames{'ID'}        = 'subID';
neural_baseline.Properties.VariableNames{'Time'}      = 'timepoint';
neural_baseline.Properties.VariableNames{'Group'}     = 'group';
neural_baseline.Properties.VariableNames{'Intensity'} = 'intensity';

% Final sort
neural_baseline = sortrows(neural_baseline, {'subID','timepoint','group','intensity','measure'});

end
