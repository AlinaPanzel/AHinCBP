function data_long = get_longitudinal_table(d,lo)

%% Get long format table 

% Sound low 

% Define column headers
headers = {'ID', 'Time', 'Group', 'A1', 'm_ventral_insula', 'm_dorsal_insula', ...
           'm_posterior_insula', 'mPFC', 'precuneus', 'FM_PAIN', 'FM_MSS', ...
           'general', 'sound'};

% Initialize the consolidated table
con_table = [];

% Group 1, S1
g1s1 = [d.G1.S1.id, d.G1.S1.time, ones(length(d.G1.S1.id), 1), ...
       lo.roi.G1.S1.A1.all_s_l, lo.roi.G1.S1.m_ventral_insula.all_s_l, ...
       lo.roi.G1.S1.m_dorsal_insula.all_s_l, lo.roi.G1.S1.m_posterior_insula.all_s_l, ...
       lo.roi.G1.S1.mPFC.all_s_l, lo.roi.G1.S1.precuneus.all_s_l, ...
       lo.fm_mvpa.G1.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G1.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G1.S1.all_s_l.general, lo.na_mvpa.G1.S1.all_s_l.sound];
con_table = [con_table; g1s1];

% Group 1, S2
g1s2 = [d.G1.S2.id, d.G1.S2.time, ones(length(d.G1.S2.id), 1), ...
       lo.roi.G1.S2.A1.all_s_l, lo.roi.G1.S2.m_ventral_insula.all_s_l, ...
       lo.roi.G1.S2.m_dorsal_insula.all_s_l, lo.roi.G1.S2.m_posterior_insula.all_s_l, ...
       lo.roi.G1.S2.mPFC.all_s_l, lo.roi.G1.S2.precuneus.all_s_l, ...
       lo.fm_mvpa.G1.S2.all_s_l.FM_PAIN, lo.fm_mvpa.G1.S2.all_s_l.FM_MSS, ...
       lo.na_mvpa.G1.S2.all_s_l.general, lo.na_mvpa.G1.S2.all_s_l.sound];
con_table = [con_table; g1s2];

% Group 2, S1
g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id), 1), ...
       lo.roi.G2.S1.A1.all_s_l, lo.roi.G2.S1.m_ventral_insula.all_s_l, ...
       lo.roi.G2.S1.m_dorsal_insula.all_s_l, lo.roi.G2.S1.m_posterior_insula.all_s_l, ...
       lo.roi.G2.S1.mPFC.all_s_l, lo.roi.G2.S1.precuneus.all_s_l, ...
       lo.fm_mvpa.G2.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G2.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G2.S1.all_s_l.general, lo.na_mvpa.G2.S1.all_s_l.sound];
con_table = [con_table; g2s1];

% Group 2, S2
g2s2 = [d.G2.S2.id, d.G2.S2.time, 2*ones(length(d.G2.S2.id), 1), ...
       lo.roi.G2.S2.A1.all_s_l, lo.roi.G2.S2.m_ventral_insula.all_s_l, ...
       lo.roi.G2.S2.m_dorsal_insula.all_s_l, lo.roi.G2.S2.m_posterior_insula.all_s_l, ...
       lo.roi.G2.S2.mPFC.all_s_l, lo.roi.G2.S2.precuneus.all_s_l, ...
       lo.fm_mvpa.G2.S2.all_s_l.FM_PAIN, lo.fm_mvpa.G2.S2.all_s_l.FM_MSS, ...
       lo.na_mvpa.G2.S2.all_s_l.general, lo.na_mvpa.G2.S2.all_s_l.sound];
con_table = [con_table; g2s2];

% Group 3, S1
g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id), 1), ...
       lo.roi.G3.S1.A1.all_s_l, lo.roi.G3.S1.m_ventral_insula.all_s_l, ...
       lo.roi.G3.S1.m_dorsal_insula.all_s_l, lo.roi.G3.S1.m_posterior_insula.all_s_l, ...
       lo.roi.G3.S1.mPFC.all_s_l, lo.roi.G3.S1.precuneus.all_s_l, ...
       lo.fm_mvpa.G3.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G3.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G3.S1.all_s_l.general, lo.na_mvpa.G3.S1.all_s_l.sound];
con_table = [con_table; g3s1];

% Group 3, S2
g3s2 = [d.G3.S2.id, d.G3.S2.time, 3*ones(length(d.G3.S2.id), 1), ...
       lo.roi.G3.S2.A1.all_s_l, lo.roi.G3.S2.m_ventral_insula.all_s_l, ...
       lo.roi.G3.S2.m_dorsal_insula.all_s_l, lo.roi.G3.S2.m_posterior_insula.all_s_l, ...
       lo.roi.G3.S2.mPFC.all_s_l, lo.roi.G3.S2.precuneus.all_s_l, ...
       lo.fm_mvpa.G3.S2.all_s_l.FM_PAIN, lo.fm_mvpa.G3.S2.all_s_l.FM_MSS, ...
       lo.na_mvpa.G3.S2.all_s_l.general, lo.na_mvpa.G3.S2.all_s_l.sound];
con_table = [con_table; g3s2];

% Convert to a table with headers
con_table_all_s_l = array2table(con_table, 'VariableNames', headers);

% Sort by subject ID
con_table_all_s_l = sortrows(con_table_all_s_l, 'ID');

% -------------------------------------------------------------

% Sound high 
con_table_h = [];

% Group 1, S1
g1s1 = [d.G1.S1.id, d.G1.S1.time, ones(length(d.G1.S1.id), 1), ...
       lo.roi.G1.S1.A1.all_s_h, lo.roi.G1.S1.m_ventral_insula.all_s_h, ...
       lo.roi.G1.S1.m_dorsal_insula.all_s_h, lo.roi.G1.S1.m_posterior_insula.all_s_h, ...
       lo.roi.G1.S1.mPFC.all_s_h, lo.roi.G1.S1.precuneus.all_s_h, ...
       lo.fm_mvpa.G1.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G1.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G1.S1.all_s_h.general, lo.na_mvpa.G1.S1.all_s_h.sound];
con_table_h = [con_table_h; g1s1];

% Group 1, S2
g1s2 = [d.G1.S2.id, d.G1.S2.time, ones(length(d.G1.S2.id), 1), ...
       lo.roi.G1.S2.A1.all_s_h, lo.roi.G1.S2.m_ventral_insula.all_s_h, ...
       lo.roi.G1.S2.m_dorsal_insula.all_s_h, lo.roi.G1.S2.m_posterior_insula.all_s_h, ...
       lo.roi.G1.S2.mPFC.all_s_h, lo.roi.G1.S2.precuneus.all_s_h, ...
       lo.fm_mvpa.G1.S2.all_s_h.FM_PAIN, lo.fm_mvpa.G1.S2.all_s_h.FM_MSS, ...
       lo.na_mvpa.G1.S2.all_s_h.general, lo.na_mvpa.G1.S2.all_s_h.sound];
con_table_h = [con_table_h; g1s2];

% Group 2, S1
g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id), 1), ...
       lo.roi.G2.S1.A1.all_s_h, lo.roi.G2.S1.m_ventral_insula.all_s_h, ...
       lo.roi.G2.S1.m_dorsal_insula.all_s_h, lo.roi.G2.S1.m_posterior_insula.all_s_h, ...
       lo.roi.G2.S1.mPFC.all_s_h, lo.roi.G2.S1.precuneus.all_s_h, ...
       lo.fm_mvpa.G2.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G2.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G2.S1.all_s_h.general, lo.na_mvpa.G2.S1.all_s_h.sound];
con_table_h = [con_table_h; g2s1];

% Group 2, S2
g2s2 = [d.G2.S2.id, d.G2.S2.time, 2*ones(length(d.G2.S2.id), 1), ...
       lo.roi.G2.S2.A1.all_s_h, lo.roi.G2.S2.m_ventral_insula.all_s_h, ...
       lo.roi.G2.S2.m_dorsal_insula.all_s_h, lo.roi.G2.S2.m_posterior_insula.all_s_h, ...
       lo.roi.G2.S2.mPFC.all_s_h, lo.roi.G2.S2.precuneus.all_s_h, ...
       lo.fm_mvpa.G2.S2.all_s_h.FM_PAIN, lo.fm_mvpa.G2.S2.all_s_h.FM_MSS, ...
       lo.na_mvpa.G2.S2.all_s_h.general, lo.na_mvpa.G2.S2.all_s_h.sound];
con_table_h = [con_table_h; g2s2];

% Group 3, S1
g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id), 1), ...
       lo.roi.G3.S1.A1.all_s_h, lo.roi.G3.S1.m_ventral_insula.all_s_h, ...
       lo.roi.G3.S1.m_dorsal_insula.all_s_h, lo.roi.G3.S1.m_posterior_insula.all_s_h, ...
       lo.roi.G3.S1.mPFC.all_s_h, lo.roi.G3.S1.precuneus.all_s_h, ...
       lo.fm_mvpa.G3.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G3.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G3.S1.all_s_h.general, lo.na_mvpa.G3.S1.all_s_h.sound];
con_table_h = [con_table_h; g3s1];

% Group 3, S2
g3s2 = [d.G3.S2.id, d.G3.S2.time, 3*ones(length(d.G3.S2.id), 1), ...
       lo.roi.G3.S2.A1.all_s_h, lo.roi.G3.S2.m_ventral_insula.all_s_h, ...
       lo.roi.G3.S2.m_dorsal_insula.all_s_h, lo.roi.G3.S2.m_posterior_insula.all_s_h, ...
       lo.roi.G3.S2.mPFC.all_s_h, lo.roi.G3.S2.precuneus.all_s_h, ...
       lo.fm_mvpa.G3.S2.all_s_h.FM_PAIN, lo.fm_mvpa.G3.S2.all_s_h.FM_MSS, ...
       lo.na_mvpa.G3.S2.all_s_h.general, lo.na_mvpa.G3.S2.all_s_h.sound];
con_table_h = [con_table_h; g3s2];

% Convert to a table with headers
con_table_all_s_h = array2table(con_table_h, 'VariableNames', headers);

% Sort by subject ID
con_table_all_s_h = sortrows(con_table_all_s_h, 'ID');


% --------------------------------------------------

%% 1) Make key columns numeric if one of the tables has them as categorical/strings
if iscategorical(con_table_all_s_l.ID),    con_table_all_s_l.ID    = str2double(string(con_table_all_s_l.ID));   end
if iscategorical(con_table_all_s_h.ID),    con_table_all_s_h.ID    = str2double(string(con_table_all_s_h.ID));   end
if iscategorical(con_table_all_s_l.Time),  con_table_all_s_l.Time  = str2double(string(con_table_all_s_l.Time)); end
if iscategorical(con_table_all_s_h.Time),  con_table_all_s_h.Time  = str2double(string(con_table_all_s_h.Time)); end
if iscategorical(con_table_all_s_l.Group), con_table_all_s_l.Group = str2double(string(con_table_all_s_l.Group));end
if iscategorical(con_table_all_s_h.Group), con_table_all_s_h.Group = str2double(string(con_table_all_s_h.Group));end

%% 2) Add Intensity column and move it after Group
con_table_all_s_l.Intensity = ones(height(con_table_all_s_l),1);   % 1 = low
con_table_all_s_h.Intensity = 2*ones(height(con_table_all_s_h),1); % 2 = high
con_table_all_s_l = movevars(con_table_all_s_l,'Intensity','After','Group');
con_table_all_s_h = movevars(con_table_all_s_h,'Intensity','After','Group');

%% 3) Align variable order/names and concatenate
con_table_all_s_h = con_table_all_s_h(:, con_table_all_s_l.Properties.VariableNames);
con_table_wide = [con_table_all_s_l; con_table_all_s_h];

%% 4) Sort by ID (and Time within ID so rows are chronological)
con_table_wide = sortrows(con_table_wide, {'ID','Time'});

%% 5) Reshape to long format
% Data variables are everything except the key columns
keyVars   = {'ID','Time','Group','Intensity'};
dataVars  = setdiff(con_table_wide.Properties.VariableNames, keyVars, 'stable');

% Ensure all data columns are numeric (stack needs consistent types)
for v = dataVars
    v = v{1};
    if iscategorical(con_table_wide.(v))
        con_table_wide.(v) = str2double(string(con_table_wide.(v)));
    end
end

% Stack (melt) into long format: one row per subject-time-measure-intensity
data_long = stack(con_table_wide, dataVars, ...
                 'NewDataVariableName','value', ...
                 'IndexVariableName','measure');

%% 6) Optional: rename keys to your preferred labels
data_long.Properties.VariableNames{'ID'}        = 'subID';
data_long.Properties.VariableNames{'Time'}      = 'timepoint';
data_long.Properties.VariableNames{'Group'}     = 'group';
data_long.Properties.VariableNames{'Intensity'} = 'intensity';

%% 7) Final sort (by subID, timepoint, group, intensity, then measure)
con_long_all = sortrows(data_long, {'subID','timepoint','group','intensity','measure'});

% Result: con_long has columns:
%   subID | timepoint | group | intensity | measure | value
%
% Save if desired:
 %save('Brain_measures_longformat_all_29.08.25.mat','T');
 %writetable(con_long_all,'Brain_measures_longformat_all_26.08.25.csv');

end