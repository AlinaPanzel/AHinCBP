function neural_baseline = get_neural_baseline_table(d,lo)
% Baseline-only (S1) neural table including HC, with all ROIs in headers.
% Outputs long format with columns:
%   subID | timepoint | group | intensity | measure | value

%% Column headers (18 columns total â€” must match every row we concatenate)
headers = {'ID', 'Time', 'Group', ...
           'A1', 'MGN', 'IC', 'S1_L', 'S1_R', ...
           'm_ventral_insula', 'm_dorsal_insula', 'm_posterior_insula', ...
           'mPFC', 'precuneus', 'PCC', ...
           'FM_PAIN', 'FM_MSS', 'general', 'sound'};

% -------------------------------
% SOUND LOW (all_s_l)
% -------------------------------
con_table = [];

% Group 1 (PRT), S1
g1s1 = [d.G1.S1.id, d.G1.S1.time, 1*ones(length(d.G1.S1.id), 1), ...
       lo.roi.G1.S1.A1.all_s_l,  lo.roi.G1.S1.MGN.all_s_l,  lo.roi.G1.S1.IC.all_s_l, ...
       lo.roi.G1.S1.S1_L.all_s_l, lo.roi.G1.S1.S1_R.all_s_l, ...
       lo.roi.G1.S1.m_ventral_insula.all_s_l, lo.roi.G1.S1.m_dorsal_insula.all_s_l, ...
       lo.roi.G1.S1.m_posterior_insula.all_s_l, lo.roi.G1.S1.mPFC.all_s_l, ...
       lo.roi.G1.S1.precuneus.all_s_l, lo.roi.G1.S1.PCC.all_s_l, ...
       lo.fm_mvpa.G1.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G1.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G1.S1.all_s_l.general, lo.na_mvpa.G1.S1.all_s_l.sound];
con_table = [con_table; g1s1];

% Group 2 (Placebo), S1
g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id), 1), ...
       lo.roi.G2.S1.A1.all_s_l,  lo.roi.G2.S1.MGN.all_s_l,  lo.roi.G2.S1.IC.all_s_l, ...
       lo.roi.G2.S1.S1_L.all_s_l, lo.roi.G2.S1.S1_R.all_s_l, ...
       lo.roi.G2.S1.m_ventral_insula.all_s_l, lo.roi.G2.S1.m_dorsal_insula.all_s_l, ...
       lo.roi.G2.S1.m_posterior_insula.all_s_l, lo.roi.G2.S1.mPFC.all_s_l, ...
        lo.roi.G2.S1.precuneus.all_s_l, lo.roi.G2.S1.PCC.all_s_l, ...
       lo.fm_mvpa.G2.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G2.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G2.S1.all_s_l.general, lo.na_mvpa.G2.S1.all_s_l.sound];
con_table = [con_table; g2s1];

% Group 3 (Usual Care), S1
g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id), 1), ...
       lo.roi.G3.S1.A1.all_s_l,  lo.roi.G3.S1.MGN.all_s_l,  lo.roi.G3.S1.IC.all_s_l, ...
       lo.roi.G3.S1.S1_L.all_s_l, lo.roi.G3.S1.S1_R.all_s_l, ...
       lo.roi.G3.S1.m_ventral_insula.all_s_l, lo.roi.G3.S1.m_dorsal_insula.all_s_l, ...
       lo.roi.G3.S1.m_posterior_insula.all_s_l, lo.roi.G3.S1.mPFC.all_s_l, ...
       lo.roi.G3.S1.precuneus.all_s_l, lo.roi.G3.S1.PCC.all_s_l, ...
       lo.fm_mvpa.G3.S1.all_s_l.FM_PAIN, lo.fm_mvpa.G3.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.G3.S1.all_s_l.general, lo.na_mvpa.G3.S1.all_s_l.sound];
con_table = [con_table; g3s1];

% Healthy Controls (coded group=0), S1
hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id), 1), ...
       lo.roi.HC.S1.A1.all_s_l,  lo.roi.HC.S1.MGN.all_s_l,  lo.roi.HC.S1.IC.all_s_l, ...
       lo.roi.HC.S1.S1_L.all_s_l, lo.roi.HC.S1.S1_R.all_s_l, ...
       lo.roi.HC.S1.m_ventral_insula.all_s_l, lo.roi.HC.S1.m_dorsal_insula.all_s_l, ...
       lo.roi.HC.S1.m_posterior_insula.all_s_l, lo.roi.HC.S1.mPFC.all_s_l, ...
       lo.roi.HC.S1.precuneus.all_s_l, lo.roi.HC.S1.PCC.all_s_l, ...
       lo.fm_mvpa.HC.S1.all_s_l.FM_PAIN, lo.fm_mvpa.HC.S1.all_s_l.FM_MSS, ...
       lo.na_mvpa.HC.S1.all_s_l.general, lo.na_mvpa.HC.S1.all_s_l.sound];
con_table = [con_table; hcs1];

% Table (low)
con_table_all_s_l = array2table(con_table, 'VariableNames', headers);
con_table_all_s_l = sortrows(con_table_all_s_l, 'ID');

% -------------------------------
% SOUND HIGH (all_s_h)
% -------------------------------
con_table_h = [];

% Group 1 (PRT), S1
g1s1 = [d.G1.S1.id, d.G1.S1.time, 1*ones(length(d.G1.S1.id), 1), ...
       lo.roi.G1.S1.A1.all_s_h,  lo.roi.G1.S1.MGN.all_s_h,  lo.roi.G1.S1.IC.all_s_h, ...
       lo.roi.G1.S1.S1_L.all_s_h, lo.roi.G1.S1.S1_R.all_s_h, ...
       lo.roi.G1.S1.m_ventral_insula.all_s_h, lo.roi.G1.S1.m_dorsal_insula.all_s_h, ...
       lo.roi.G1.S1.m_posterior_insula.all_s_h, lo.roi.G1.S1.mPFC.all_s_h, ...
       lo.roi.G1.S1.precuneus.all_s_h, lo.roi.G1.S1.PCC.all_s_h, ...
       lo.fm_mvpa.G1.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G1.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G1.S1.all_s_h.general, lo.na_mvpa.G1.S1.all_s_h.sound];
con_table_h = [con_table_h; g1s1];

% Group 2 (Placebo), S1
g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id), 1), ...
       lo.roi.G2.S1.A1.all_s_h,  lo.roi.G2.S1.MGN.all_s_h,  lo.roi.G2.S1.IC.all_s_h, ...
       lo.roi.G2.S1.S1_L.all_s_h, lo.roi.G2.S1.S1_R.all_s_h, ...
       lo.roi.G2.S1.m_ventral_insula.all_s_h, lo.roi.G2.S1.m_dorsal_insula.all_s_h, ...
       lo.roi.G2.S1.m_posterior_insula.all_s_h, lo.roi.G2.S1.mPFC.all_s_h, ...
       lo.roi.G2.S1.precuneus.all_s_h, lo.roi.G2.S1.PCC.all_s_h, ...
       lo.fm_mvpa.G2.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G2.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G2.S1.all_s_h.general, lo.na_mvpa.G2.S1.all_s_h.sound];
con_table_h = [con_table_h; g2s1];

% Group 3 (Usual Care), S1
g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id), 1), ...
       lo.roi.G3.S1.A1.all_s_h,  lo.roi.G3.S1.MGN.all_s_h,  lo.roi.G3.S1.IC.all_s_h, ...
       lo.roi.G3.S1.S1_L.all_s_h, lo.roi.G3.S1.S1_R.all_s_h, ...
       lo.roi.G3.S1.m_ventral_insula.all_s_h, lo.roi.G3.S1.m_dorsal_insula.all_s_h, ...
       lo.roi.G3.S1.m_posterior_insula.all_s_h, lo.roi.G3.S1.mPFC.all_s_h, ...
       lo.roi.G3.S1.precuneus.all_s_h, lo.roi.G3.S1.PCC.all_s_h, ...
       lo.fm_mvpa.G3.S1.all_s_h.FM_PAIN, lo.fm_mvpa.G3.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.G3.S1.all_s_h.general, lo.na_mvpa.G3.S1.all_s_h.sound];
con_table_h = [con_table_h; g3s1];

% Healthy Controls (group=0), S1
hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id), 1), ...
       lo.roi.HC.S1.A1.all_s_h,  lo.roi.HC.S1.MGN.all_s_h,  lo.roi.HC.S1.IC.all_s_h, ...
       lo.roi.HC.S1.S1_L.all_s_h, lo.roi.HC.S1.S1_R.all_s_h, ...
       lo.roi.HC.S1.m_ventral_insula.all_s_h, lo.roi.HC.S1.m_dorsal_insula.all_s_h, ...
       lo.roi.HC.S1.m_posterior_insula.all_s_h, lo.roi.HC.S1.mPFC.all_s_h, ...
       lo.roi.HC.S1.precuneus.all_s_h, lo.roi.HC.S1.PCC.all_s_h, ...
       lo.fm_mvpa.HC.S1.all_s_h.FM_PAIN, lo.fm_mvpa.HC.S1.all_s_h.FM_MSS, ...
       lo.na_mvpa.HC.S1.all_s_h.general, lo.na_mvpa.HC.S1.all_s_h.sound];
con_table_h = [con_table_h; hcs1];

% Table (high)
con_table_all_s_h = array2table(con_table_h, 'VariableNames', headers);
con_table_all_s_h = sortrows(con_table_all_s_h, 'ID');

% -------------------------------
% Merge + reshape
% -------------------------------
% Add intensity (1=low, 2=high)
con_table_all_s_l.Intensity = ones(height(con_table_all_s_l),1);
con_table_all_s_h.Intensity = 2*ones(height(con_table_all_s_h),1);

con_table_all_s_l = movevars(con_table_all_s_l,'Intensity','After','Group');
con_table_all_s_h = movevars(con_table_all_s_h,'Intensity','After','Group');

% Align variable orders and concatenate
con_table_all_s_h = con_table_all_s_h(:, con_table_all_s_l.Properties.VariableNames);
con_table_wide    = [con_table_all_s_l; con_table_all_s_h];
con_table_wide    = sortrows(con_table_wide, {'ID','Time'});

% Reshape to long format
keyVars  = {'ID','Time','Group','Intensity'};
dataVars = setdiff(con_table_wide.Properties.VariableNames, keyVars, 'stable');

neural_baseline = stack(con_table_wide, dataVars, ...
                        'NewDataVariableName','value', ...
                        'IndexVariableName','measure');

% Rename keys to final names
neural_baseline.Properties.VariableNames{'ID'}        = 'subID';
neural_baseline.Properties.VariableNames{'Time'}      = 'timepoint';
neural_baseline.Properties.VariableNames{'Group'}     = 'group';
neural_baseline.Properties.VariableNames{'Intensity'} = 'intensity';

% Final sort
neural_baseline = sortrows(neural_baseline, ...
    {'subID','timepoint','group','intensity','measure'});

end
