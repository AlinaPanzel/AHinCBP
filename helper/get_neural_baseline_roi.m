function neural_baseline_roi = get_neural_baseline_roi(d, lo)
% Baseline-only (S1) neural table incl. HC, ROI-only (no MVPA),
%  both Sound and Pressure (thumb), Low/High.
% Returns long format:
%   subID | timepoint | group | intensity | modality | measure | value

%% ROI column headers (no MVPA)
headers = {'ID','Time','Group', ...
           'A1','MGN','IC','S1_L','S1_R', ...
           'm_ventral_insula','m_dorsal_insula','m_posterior_insula', ...
           'mPFC','precuneus','PCC'};

% =======================
% SOUND — LOW (all_s_l)
% =======================
con_table = [];

% G1 (PRT), S1
g1s1 = [d.G1.S1.id, d.G1.S1.time, 1*ones(length(d.G1.S1.id),1), ...
        lo.roi.G1.S1.A1.all_s_l,  lo.roi.G1.S1.MGN.all_s_l,  lo.roi.G1.S1.IC.all_s_l, ...
        lo.roi.G1.S1.S1_L.all_s_l, lo.roi.G1.S1.S1_R.all_s_l, ...
        lo.roi.G1.S1.m_ventral_insula.all_s_l, lo.roi.G1.S1.m_dorsal_insula.all_s_l, ...
        lo.roi.G1.S1.m_posterior_insula.all_s_l, lo.roi.G1.S1.mPFC.all_s_l, ...
        lo.roi.G1.S1.precuneus.all_s_l, lo.roi.G1.S1.PCC.all_s_l];
con_table = [con_table; g1s1];

% G2 (Placebo), S1
g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id),1), ...
        lo.roi.G2.S1.A1.all_s_l,  lo.roi.G2.S1.MGN.all_s_l,  lo.roi.G2.S1.IC.all_s_l, ...
        lo.roi.G2.S1.S1_L.all_s_l, lo.roi.G2.S1.S1_R.all_s_l, ...
        lo.roi.G2.S1.m_ventral_insula.all_s_l, lo.roi.G2.S1.m_dorsal_insula.all_s_l, ...
        lo.roi.G2.S1.m_posterior_insula.all_s_l, lo.roi.G2.S1.mPFC.all_s_l, ...
        lo.roi.G2.S1.precuneus.all_s_l, lo.roi.G2.S1.PCC.all_s_l];
con_table = [con_table; g2s1];

% G3 (UC), S1
g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id),1), ...
        lo.roi.G3.S1.A1.all_s_l,  lo.roi.G3.S1.MGN.all_s_l,  lo.roi.G3.S1.IC.all_s_l, ...
        lo.roi.G3.S1.S1_L.all_s_l, lo.roi.G3.S1.S1_R.all_s_l, ...
        lo.roi.G3.S1.m_ventral_insula.all_s_l, lo.roi.G3.S1.m_dorsal_insula.all_s_l, ...
        lo.roi.G3.S1.m_posterior_insula.all_s_l, lo.roi.G3.S1.mPFC.all_s_l, ...
        lo.roi.G3.S1.precuneus.all_s_l, lo.roi.G3.S1.PCC.all_s_l];
con_table = [con_table; g3s1];

% HC (group=0), S1
hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id),1), ...
        lo.roi.HC.S1.A1.all_s_l,  lo.roi.HC.S1.MGN.all_s_l,  lo.roi.HC.S1.IC.all_s_l, ...
        lo.roi.HC.S1.S1_L.all_s_l, lo.roi.HC.S1.S1_R.all_s_l, ...
        lo.roi.HC.S1.m_ventral_insula.all_s_l, lo.roi.HC.S1.m_dorsal_insula.all_s_l, ...
        lo.roi.HC.S1.m_posterior_insula.all_s_l, lo.roi.HC.S1.mPFC.all_s_l, ...
        lo.roi.HC.S1.precuneus.all_s_l, lo.roi.HC.S1.PCC.all_s_l];
con_table = [con_table; hcs1];

con_table_all_s_l = array2table(con_table, 'VariableNames', headers);
con_table_all_s_l = sortrows(con_table_all_s_l, 'ID');

% =======================
% SOUND — HIGH (all_s_h)
% =======================
con_table_h = [];

g1s1 = [d.G1.S1.id, d.G1.S1.time, 1*ones(length(d.G1.S1.id),1), ...
        lo.roi.G1.S1.A1.all_s_h,  lo.roi.G1.S1.MGN.all_s_h,  lo.roi.G1.S1.IC.all_s_h, ...
        lo.roi.G1.S1.S1_L.all_s_h, lo.roi.G1.S1.S1_R.all_s_h, ...
        lo.roi.G1.S1.m_ventral_insula.all_s_h, lo.roi.G1.S1.m_dorsal_insula.all_s_h, ...
        lo.roi.G1.S1.m_posterior_insula.all_s_h, lo.roi.G1.S1.mPFC.all_s_h, ...
        lo.roi.G1.S1.precuneus.all_s_h, lo.roi.G1.S1.PCC.all_s_h];
con_table_h = [con_table_h; g1s1];

g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id),1), ...
        lo.roi.G2.S1.A1.all_s_h,  lo.roi.G2.S1.MGN.all_s_h,  lo.roi.G2.S1.IC.all_s_h, ...
        lo.roi.G2.S1.S1_L.all_s_h, lo.roi.G2.S1.S1_R.all_s_h, ...
        lo.roi.G2.S1.m_ventral_insula.all_s_h, lo.roi.G2.S1.m_dorsal_insula.all_s_h, ...
        lo.roi.G2.S1.m_posterior_insula.all_s_h, lo.roi.G2.S1.mPFC.all_s_h, ...
        lo.roi.G2.S1.precuneus.all_s_h, lo.roi.G2.S1.PCC.all_s_h];
con_table_h = [con_table_h; g2s1];

g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id),1), ...
        lo.roi.G3.S1.A1.all_s_h,  lo.roi.G3.S1.MGN.all_s_h,  lo.roi.G3.S1.IC.all_s_h, ...
        lo.roi.G3.S1.S1_L.all_s_h, lo.roi.G3.S1.S1_R.all_s_h, ...
        lo.roi.G3.S1.m_ventral_insula.all_s_h, lo.roi.G3.S1.m_dorsal_insula.all_s_h, ...
        lo.roi.G3.S1.m_posterior_insula.all_s_h, lo.roi.G3.S1.mPFC.all_s_h, ...
        lo.roi.G3.S1.precuneus.all_s_h, lo.roi.G3.S1.PCC.all_s_h];
con_table_h = [con_table_h; g3s1];

hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id),1), ...
        lo.roi.HC.S1.A1.all_s_h,  lo.roi.HC.S1.MGN.all_s_h,  lo.roi.HC.S1.IC.all_s_h, ...
        lo.roi.HC.S1.S1_L.all_s_h, lo.roi.HC.S1.S1_R.all_s_h, ...
        lo.roi.HC.S1.m_ventral_insula.all_s_h, lo.roi.HC.S1.m_dorsal_insula.all_s_h, ...
        lo.roi.HC.S1.m_posterior_insula.all_s_h, lo.roi.HC.S1.mPFC.all_s_h, ...
        lo.roi.HC.S1.precuneus.all_s_h, lo.roi.HC.S1.PCC.all_s_h];
con_table_h = [con_table_h; hcs1];

con_table_all_s_h = array2table(con_table_h, 'VariableNames', headers);
con_table_all_s_h = sortrows(con_table_all_s_h, 'ID');

% =======================
% PRESSURE — LOW (all_t_l)
% =======================
con_table_tl = [];

g1s1 = [d.G1.S1.id, d.G1.S1.time, 1*ones(length(d.G1.S1.id),1), ...
        lo.roi.G1.S1.A1.all_t_l,  lo.roi.G1.S1.MGN.all_t_l,  lo.roi.G1.S1.IC.all_t_l, ...
        lo.roi.G1.S1.S1_L.all_t_l, lo.roi.G1.S1.S1_R.all_t_l, ...
        lo.roi.G1.S1.m_ventral_insula.all_t_l, lo.roi.G1.S1.m_dorsal_insula.all_t_l, ...
        lo.roi.G1.S1.m_posterior_insula.all_t_l, lo.roi.G1.S1.mPFC.all_t_l, ...
        lo.roi.G1.S1.precuneus.all_t_l, lo.roi.G1.S1.PCC.all_t_l];
con_table_tl = [con_table_tl; g1s1];

g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id),1), ...
        lo.roi.G2.S1.A1.all_t_l,  lo.roi.G2.S1.MGN.all_t_l,  lo.roi.G2.S1.IC.all_t_l, ...
        lo.roi.G2.S1.S1_L.all_t_l, lo.roi.G2.S1.S1_R.all_t_l, ...
        lo.roi.G2.S1.m_ventral_insula.all_t_l, lo.roi.G2.S1.m_dorsal_insula.all_t_l, ...
        lo.roi.G2.S1.m_posterior_insula.all_t_l, lo.roi.G2.S1.mPFC.all_t_l, ...
        lo.roi.G2.S1.precuneus.all_t_l, lo.roi.G2.S1.PCC.all_t_l];
con_table_tl = [con_table_tl; g2s1];

g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id),1), ...
        lo.roi.G3.S1.A1.all_t_l,  lo.roi.G3.S1.MGN.all_t_l,  lo.roi.G3.S1.IC.all_t_l, ...
        lo.roi.G3.S1.S1_L.all_t_l, lo.roi.G3.S1.S1_R.all_t_l, ...
        lo.roi.G3.S1.m_ventral_insula.all_t_l, lo.roi.G3.S1.m_dorsal_insula.all_t_l, ...
        lo.roi.G3.S1.m_posterior_insula.all_t_l, lo.roi.G3.S1.mPFC.all_t_l, ...
        lo.roi.G3.S1.precuneus.all_t_l, lo.roi.G3.S1.PCC.all_t_l];
con_table_tl = [con_table_tl; g3s1];

hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id),1), ...
        lo.roi.HC.S1.A1.all_t_l,  lo.roi.HC.S1.MGN.all_t_l,  lo.roi.HC.S1.IC.all_t_l, ...
        lo.roi.HC.S1.S1_L.all_t_l, lo.roi.HC.S1.S1_R.all_t_l, ...
        lo.roi.HC.S1.m_ventral_insula.all_t_l, lo.roi.HC.S1.m_dorsal_insula.all_t_l, ...
        lo.roi.HC.S1.m_posterior_insula.all_t_l, lo.roi.HC.S1.mPFC.all_t_l, ...
        lo.roi.HC.S1.precuneus.all_t_l, lo.roi.HC.S1.PCC.all_t_l];
con_table_tl = [con_table_tl; hcs1];

con_table_all_t_l = array2table(con_table_tl, 'VariableNames', headers);
con_table_all_t_l = sortrows(con_table_all_t_l, 'ID');

% =======================
% PRESSURE — HIGH (all_t_h)
% =======================
con_table_th = [];

g1s1 = [d.G1.S1.id, d.G1.S1.time, 1*ones(length(d.G1.S1.id),1), ...
        lo.roi.G1.S1.A1.all_t_h,  lo.roi.G1.S1.MGN.all_t_h,  lo.roi.G1.S1.IC.all_t_h, ...
        lo.roi.G1.S1.S1_L.all_t_h, lo.roi.G1.S1.S1_R.all_t_h, ...
        lo.roi.G1.S1.m_ventral_insula.all_t_h, lo.roi.G1.S1.m_dorsal_insula.all_t_h, ...
        lo.roi.G1.S1.m_posterior_insula.all_t_h, lo.roi.G1.S1.mPFC.all_t_h, ...
        lo.roi.G1.S1.precuneus.all_t_h, lo.roi.G1.S1.PCC.all_t_h];
con_table_th = [con_table_th; g1s1];

g2s1 = [d.G2.S1.id, d.G2.S1.time, 2*ones(length(d.G2.S1.id),1), ...
        lo.roi.G2.S1.A1.all_t_h,  lo.roi.G2.S1.MGN.all_t_h,  lo.roi.G2.S1.IC.all_t_h, ...
        lo.roi.G2.S1.S1_L.all_t_h, lo.roi.G2.S1.S1_R.all_t_h, ...
        lo.roi.G2.S1.m_ventral_insula.all_t_h, lo.roi.G2.S1.m_dorsal_insula.all_t_h, ...
        lo.roi.G2.S1.m_posterior_insula.all_t_h, lo.roi.G2.S1.mPFC.all_t_h, ...
        lo.roi.G2.S1.precuneus.all_t_h, lo.roi.G2.S1.PCC.all_t_h];
con_table_th = [con_table_th; g2s1];

g3s1 = [d.G3.S1.id, d.G3.S1.time, 3*ones(length(d.G3.S1.id),1), ...
        lo.roi.G3.S1.A1.all_t_h,  lo.roi.G3.S1.MGN.all_t_h,  lo.roi.G3.S1.IC.all_t_h, ...
        lo.roi.G3.S1.S1_L.all_t_h, lo.roi.G3.S1.S1_R.all_t_h, ...
        lo.roi.G3.S1.m_ventral_insula.all_t_h, lo.roi.G3.S1.m_dorsal_insula.all_t_h, ...
        lo.roi.G3.S1.m_posterior_insula.all_t_h, lo.roi.G3.S1.mPFC.all_t_h, ...
        lo.roi.G3.S1.precuneus.all_t_h, lo.roi.G3.S1.PCC.all_t_h];
con_table_th = [con_table_th; g3s1];

hcs1 = [d.HC.S1.id, d.HC.S1.time, 0*ones(length(d.HC.S1.id),1), ...
        lo.roi.HC.S1.A1.all_t_h,  lo.roi.HC.S1.MGN.all_t_h,  lo.roi.HC.S1.IC.all_t_h, ...
        lo.roi.HC.S1.S1_L.all_t_h, lo.roi.HC.S1.S1_R.all_t_h, ...
        lo.roi.HC.S1.m_ventral_insula.all_t_h, lo.roi.HC.S1.m_dorsal_insula.all_t_h, ...
        lo.roi.HC.S1.m_posterior_insula.all_t_h, lo.roi.HC.S1.mPFC.all_t_h, ...
        lo.roi.HC.S1.precuneus.all_t_h, lo.roi.HC.S1.PCC.all_t_h];
con_table_th = [con_table_th; hcs1];

con_table_all_t_h = array2table(con_table_th, 'VariableNames', headers);
con_table_all_t_h = sortrows(con_table_all_t_h, 'ID');

% =======================
% Merge + reshape
% =======================

% Add Intensity & Modality
% 1=low, 2=high; modality as char/categorical later
con_table_all_s_l.Intensity = ones(height(con_table_all_s_l),1);
con_table_all_s_h.Intensity = 2*ones(height(con_table_all_s_h),1);
con_table_all_t_l.Intensity = ones(height(con_table_all_t_l),1);
con_table_all_t_h.Intensity = 2*ones(height(con_table_all_t_h),1);

con_table_all_s_l.Modality = repmat("Sound",    height(con_table_all_s_l),1);
con_table_all_s_h.Modality = repmat("Sound",    height(con_table_all_s_h),1);
con_table_all_t_l.Modality = repmat("Pressure", height(con_table_all_t_l),1);
con_table_all_t_h.Modality = repmat("Pressure", height(con_table_all_t_h),1);

% Put keys in consistent order
con_table_all_s_l = movevars(con_table_all_s_l, {'Intensity','Modality'}, 'After','Group');
con_table_all_s_h = movevars(con_table_all_s_h, {'Intensity','Modality'}, 'After','Group');
con_table_all_t_l = movevars(con_table_all_t_l, {'Intensity','Modality'}, 'After','Group');
con_table_all_t_h = movevars(con_table_all_t_h, {'Intensity','Modality'}, 'After','Group');

% Align and concatenate 4 tables
commonOrder = con_table_all_s_l.Properties.VariableNames;
con_table_all_s_h = con_table_all_s_h(:, commonOrder);
con_table_all_t_l = con_table_all_t_l(:, commonOrder);
con_table_all_t_h = con_table_all_t_h(:, commonOrder);

con_table_wide = [con_table_all_s_l; con_table_all_s_h; con_table_all_t_l; con_table_all_t_h];
con_table_wide = sortrows(con_table_wide, {'ID','Time'});

% Reshape to long format
keyVars  = {'ID','Time','Group','Intensity','Modality'};
dataVars = setdiff(con_table_wide.Properties.VariableNames, keyVars, 'stable');

neural_baseline_roi = stack(con_table_wide, dataVars, ...
                            'NewDataVariableName','value', ...
                            'IndexVariableName','measure');

% Rename keys
neural_baseline_roi.Properties.VariableNames{'ID'}        = 'subID';
neural_baseline_roi.Properties.VariableNames{'Time'}      = 'timepoint';
neural_baseline_roi.Properties.VariableNames{'Group'}     = 'group';
neural_baseline_roi.Properties.VariableNames{'Intensity'} = 'intensity';

% Nice types
neural_baseline_roi.modality  = categorical(string(neural_baseline_roi.Modality));
neural_baseline_roi.Modality  = [];  % drop temp
neural_baseline_roi.intensity = categorical(neural_baseline_roi.intensity, [1 2], {'Low','High'});

% Final sort
neural_baseline_roi = sortrows(neural_baseline_roi, ...
    {'subID','timepoint','group','modality','intensity','measure'});

end
